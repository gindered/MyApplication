<?xml version="1.0" encoding="utf-8"?>
<!-- In der activity_main.xml-Datei wird das Layout für die Hauptaktivität
in einer Android-Anwendung definiert-->

<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/constraintLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity" >

    <androidx.core.widget.NestedScrollView
        android:id="@+id/nestedScrollView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fillViewport="true"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" >

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:nestedScrollingEnabled="true"
            android:orientation="vertical" >

            <TextView
                android:id="@+id/lvItemsTitle"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="@string/open_tasks"
                android:textAppearance="@style/TextAppearance.AppCompat.Display1"
                android:textColor="@color/accent" />

            <ListView
                android:id="@+id/lvItems"
                android:layout_width="match_parent"
                android:layout_height="wrap_content" />

            <TextView
                android:id="@+id/lvItemsDoneTitle"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="@string/done_tasks"
                android:textAppearance="@style/TextAppearance.AppCompat.Display1"
                android:textColor="?android:attr/textColorPrimary" />

            <ListView
                android:id="@+id/lvItemsDone"
                android:layout_width="match_parent"
                android:layout_height="wrap_content" />

        </LinearLayout>

    </androidx.core.widget.NestedScrollView>

    <LinearLayout
        android:id="@+id/LinLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/accent"
        android:orientation="horizontal"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent" >

        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="match_parent"
            android:layout_marginHorizontal="5dp"
            android:contentDescription="TODO"
            android:scaleType="center"
            app:srcCompat="@drawable/add_image" />

        <EditText
            android:id="@+id/etNewItem"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginHorizontal="5dp"
            android:layout_marginVertical="5dp"
            android:layout_weight="1"
            android:autofillHints="todo"
            android:background="@drawable/rounded_edittext"
            android:drawableEnd="@android:drawable/ic_notification_clear_all"
            android:drawableTint="@color/accent"
            android:hint="@string/text_new_item"
            android:inputType="text|textAutoComplete|textAutoCorrect"
            android:textAlignment="center"
            android:textColor="?android:attr/textColorPrimary"
            android:textColorHighlight="@color/accent"
            android:textColorHint="?android:attr/textColorPrimary"
            android:textColorLink="?android:attr/textColorPrimary"
            android:textCursorDrawable="@color/accent" />


        <Button
            android:id="@+id/btnAddItem"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="5dp"
            android:backgroundTint="?android:attr/windowBackground"
            android:onClick="onAddItem"
            android:text="@string/button_add_item"
            android:textColor="?android:attr/textColorPrimary"
            app:cornerRadius="20dp" />

    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>

<!-- `<androidx.constraintlayout.widget.ConstraintLayout>`: Dieses Tag definiert
das Wurzelelement des Layouts als ein ConstraintLayout, das ein flexibles Layout
zur Positionierung von UI-Elementen bietet -->

<!-- `android:layout_width="match_parent"`: Diese Eigenschaft legt die Breite des
Wurzelelements auf die gleiche Breite wie das übergeordnete Elternelement fest -->

<!-- android:label="@string/app_name": Der Name der Anwendung, der angezeigt wird -->

<!-- `android:layout_height="match_parent"`: Diese Eigenschaft legt die Höhe des
Wurzelelements auf die gleiche Höhe wie das übergeordnete Elternelement fest -->

<!-- `tools:context=".MainActivity"`: Diese Eigenschaft definiert den Kontext der
Layout-Datei als die MainActivity-Klasse. Dies ist hilfreich für die Vorschau des
Layouts in der Designansicht des Android Studio -->

<!-- `android:layout_width="wrap_content"`: Diese Eigenschaft legt die Breite
des TextViews auf die Breite des Textinhalts fest -->

<!-- `app:layout_constraintBottom_toBottomOf="parent"`: Dies definiert eine Verbindung
zwischen dem unteren Kantenpunkt des TextViews und dem unteren Kantenpunkt des
Elternelements (ConstraintLayout), um die vertikale Positionierung zu steuern -->

<!-- `app:layout_constraintEnd_toEndOf="parent"`: Dies definiert eine Verbindung zwischen
dem rechten Kantenpunkt des TextViews und dem rechten Kantenpunkt des Elternelements,
um die horizontale Positionierung zu steuern-->

<!-- `app:layout_constraintStart_toStartOf="parent"`: Dies definiert eine Verbindung
zwischen dem linken Kantenpunkt des TextViews und dem linken Kantenpunkt des Elternelements,
um die horizontale Positionierung zu steuern-->

<!-- `app:layout_constraintTop_toTopOf="parent"`: Dies definiert eine Verbindung
zwischen dem oberen Kantenpunkt des TextViews und dem oberen Kantenpunkt des Elternelements,
um die vertikale Positionierung zu steuern-->

<!--  Das ConstraintLayout wird verwendet, um die Position des TextViews zu definieren,
indem Verbindungen zu den Kantenpunkten des ConstraintLayouts hergestellt werden -->