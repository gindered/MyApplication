<?xml version="1.0" encoding="utf-8"?>
<!-- In der activity_main.xml-Datei wird das Layout für die Hauptaktivität
in einer Android-Anwendung definiert-->

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/lvItemsTitel"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/open_tasks"
        android:textAppearance="@style/TextAppearance.AppCompat.Display1"
        />

    <ListView
        android:id="@+id/lvItems"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/lvItemsTitel"
        />

    <TextView
        android:id="@+id/lvItemsDoneTitel"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/lvItems"
        android:background="#aaaaaa"
        android:text="@string/done_tasks"
        android:textAppearance="@style/TextAppearance.AppCompat.Display1"
        android:textColor="@color/my_colorbutton"
        android:textStyle="italic" />

    <ListView
        android:id="@+id/lvItemsDone"
        android:textStyle="italic"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/lvItemsDoneTitel"
        android:background="#aaaaaa"
        />

    <LinearLayout
        android:id="@+id/LinLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:layout_alignParentBottom="true"
        android:background="@color/black"
        >

        <EditText
            android:id="@+id/etNewItem"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="2dp"
            android:layout_weight="1"
            android:hint="@string/text_new_item"
            android:inputType="text|textAutoComplete|textAutoCorrect"
            android:textColor="@color/white"
            android:textColorHint="@color/white"
            android:autofillHints="todo" />


        <Button
            android:id="@+id/btnAddItem"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="2dp"
            android:backgroundTint="@color/my_colorbutton"
            android:onClick="onAddItem"
            android:text="@string/button_add_item"
            android:textColor="@color/white"/>

    </LinearLayout>

</RelativeLayout>

<!-- `<androidx.constraintlayout.widget.ConstraintLayout>`: Dieses Tag definiert
das Wurzelelement des Layouts als ein ConstraintLayout, das ein flexibles Layout
zur Positionierung von UI-Elementen bietet -->

<!-- `android:layout_width="match_parent"`: Diese Eigenschaft legt die Breite des
Wurzelelements auf die gleiche Breite wie das übergeordnete Elternelement fest -->

<!-- android:label="@string/app_name": Der Name der Anwendung, der angezeigt wird -->

<!-- `android:layout_height="match_parent"`: Diese Eigenschaft legt die Höhe des
Wurzelelements auf die gleiche Höhe wie das übergeordnete Elternelement fest -->

<!-- `tools:context=".MainActivity"`: Diese Eigenschaft definiert den Kontext der
Layout-Datei als die MainActivity-Klasse. Dies ist hilfreich für die Vorschau des
Layouts in der Designansicht des Android Studio -->

<!-- `android:layout_width="wrap_content"`: Diese Eigenschaft legt die Breite
des TextViews auf die Breite des Textinhalts fest -->

<!-- `app:layout_constraintBottom_toBottomOf="parent"`: Dies definiert eine Verbindung
zwischen dem unteren Kantenpunkt des TextViews und dem unteren Kantenpunkt des
Elternelements (ConstraintLayout), um die vertikale Positionierung zu steuern -->

<!-- `app:layout_constraintEnd_toEndOf="parent"`: Dies definiert eine Verbindung zwischen
dem rechten Kantenpunkt des TextViews und dem rechten Kantenpunkt des Elternelements,
um die horizontale Positionierung zu steuern-->

<!-- `app:layout_constraintStart_toStartOf="parent"`: Dies definiert eine Verbindung
zwischen dem linken Kantenpunkt des TextViews und dem linken Kantenpunkt des Elternelements,
um die horizontale Positionierung zu steuern-->

<!-- `app:layout_constraintTop_toTopOf="parent"`: Dies definiert eine Verbindung
zwischen dem oberen Kantenpunkt des TextViews und dem oberen Kantenpunkt des Elternelements,
um die vertikale Positionierung zu steuern-->

<!--  Das ConstraintLayout wird verwendet, um die Position des TextViews zu definieren,
indem Verbindungen zu den Kantenpunkten des ConstraintLayouts hergestellt werden -->